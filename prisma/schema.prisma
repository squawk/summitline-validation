generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  username    String       @unique
  name        String?
  jobTitle    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  assessments Assessment[]
  connections Connection[]
  notes       Note[]
  passkey     Passkey[]
  password    Password?
  sessions    Session[]
  image       UserImage?
  roles       Role[]       @relation("RoleToUser")
}

model Note {
  id        String      @id @default(cuid())
  title     String
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  ownerId   String
  owner     User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  images    NoteImage[]

  @@index([ownerId])
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id        String   @id @default(cuid())
  altText   String?
  objectKey String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  noteId    String
  note      Note     @relation(fields: [noteId], references: [id], onDelete: Cascade)

  @@index([noteId])
}

model UserImage {
  id        String   @id @default(cuid())
  altText   String?
  objectKey String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Password {
  hash   String
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Permission {
  id          String   @id @default(cuid())
  action      String
  entity      String
  access      String
  description String   @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       Role[]   @relation("PermissionToRole")

  @@unique([action, entity, access])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String       @default("")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[] @relation("PermissionToRole")
  users       User[]       @relation("RoleToUser")
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  /// The type of verification, e.g. "email" or "phone"
  type      String
  /// The thing we're trying to verify, e.g. a user's email or phone number
  target    String
  /// The secret key used to generate the otp
  secret    String
  /// The algorithm used to generate the otp
  algorithm String
  /// The number of digits in the otp
  digits    Int
  /// The number of seconds the otp is valid for
  period    Int
  /// The valid characters for the otp
  charSet   String
  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String   @id @default(cuid())
  providerName String
  providerId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerName, providerId])
}

model Passkey {
  id             String   @id
  aaguid         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  publicKey      Bytes
  userId         String
  webauthnUserId String
  counter        BigInt
  deviceType     String
  backedUp       Boolean
  transports     String?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Competency {
  id                String             @id @default(uuid())
  name              String
  description       String
  assessmentRatings AssessmentRating[]
  levels            CompetencyLevel[]
  supervisorRatings SupervisorRating[]
}

model CompetencyLevel {
  id           String     @id @default(uuid())
  competencyId String     @map("competency_id")
  level        Int
  title        String
  behaviors    Behavior[]
  competency   Competency @relation(fields: [competencyId], references: [id], onDelete: Cascade)
}

model Behavior {
  id                String          @id @default(uuid())
  competencyLevelId String          @map("competency_level_id")
  description       String
  competencyLevel   CompetencyLevel @relation(fields: [competencyLevelId], references: [id], onDelete: Cascade)
}

model Assessment {
  id                String             @id @default(uuid())
  userId            String             @map("user_id")
  status            String             @default("DRAFT")
  completedAt       DateTime?          @map("completed_at")
  createdAt         DateTime           @default(now()) @map("created_at")
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  ratings           AssessmentRating[]
  supervisorRatings SupervisorRating[]
}

model AssessmentRating {
  id                String     @id @default(uuid())
  assessmentId      String     @map("assessment_id")
  competencyId      String     @map("competency_id")
  criticality       Int
  currentLevel      Int        @map("current_level")
  expectedLevel     Int        @map("expected_level")
  developmentNeeded Int        @map("development_needed")
  comments          String?
  competency        Competency @relation(fields: [competencyId], references: [id])
  assessment        Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@unique([assessmentId, competencyId])
}

model SupervisorRating {
  id                String     @id @default(uuid())
  assessmentId      String     @map("assessment_id")
  competencyId      String     @map("competency_id")
  criticality       Int
  currentLevel      Int        @map("current_level")
  expectedLevel     Int        @map("expected_level")
  developmentNeeded Int        @map("development_needed")
  comments          String?
  competency        Competency @relation(fields: [competencyId], references: [id])
  assessment        Assessment @relation(fields: [assessmentId], references: [id], onDelete: Cascade)

  @@unique([assessmentId, competencyId])
}
